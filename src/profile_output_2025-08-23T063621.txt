Timer unit: 1e-09 s

Total time: 17.5513 s
File: /home/dpsh/miniforge3/envs/vr-teleop/lib/python3.12/site-packages/yourdfpy/urdf.py
Function: URDF.update_cfg at line 1084

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
  1084                                               @profile
  1085                                               def update_cfg(self, configuration):
  1086                                                   """Update joint configuration of URDF; does forward kinematics.
  1087                                           
  1088                                                   Args:
  1089                                                       configuration (dict, list[float], tuple[float] or np.ndarray): A mapping from joints or joint names to configuration values, or a list containing a value for each actuated joint.
  1090                                           
  1091                                                   Raises:
  1092                                                       ValueError: Raised if dimensionality of configuration does not match number of actuated joints of URDF model.
  1093                                                       TypeError: Raised if configuration is neither a dict, list, tuple or np.ndarray.
  1094                                                   """
  1095     10821   10612105.0    980.7      0.1          joint_cfg = []
  1096                                           
  1097     10821   11892998.0   1099.1      0.1          if isinstance(configuration, dict):
  1098    108051   92668042.0    857.6      0.5              for joint in configuration:
  1099     97230   83345238.0    857.2      0.5                  if isinstance(joint, six.string_types):
  1100     97230   89188700.0    917.3      0.5                      joint_cfg.append((self._joint_map[joint], configuration[joint]))
  1101                                                           elif isinstance(joint, Joint):
  1102                                                               # TODO: Joint is not hashable; so this branch will not succeed
  1103                                                               joint_cfg.append((joint, configuration[joint]))
  1104                                                   elif isinstance(configuration, (list, tuple, np.ndarray)):
  1105                                                       if len(configuration) == len(self.robot.joints):
  1106                                                           for joint, value in zip(self.robot.joints, configuration):
  1107                                                               joint_cfg.append((joint, value))
  1108                                                       elif len(configuration) == self.num_actuated_joints:
  1109                                                           for joint, value in zip(self._actuated_joints, configuration):
  1110                                                               joint_cfg.append((joint, value))
  1111                                                       else:
  1112                                                           raise ValueError(
  1113                                                               f"Dimensionality of configuration ({len(configuration)}) doesn't match number of all ({len(self.robot.joints)}) or actuated joints ({self.num_actuated_joints})."
  1114                                                           )
  1115                                                   else:
  1116                                                       raise TypeError("Invalid type for configuration")
  1117                                           
  1118                                                   # append all mimic joints in the update
  1119    146162  169842914.0   1162.0      1.0          for j, q in joint_cfg + [
  1120     21642   47139908.0   2178.2      0.3              (j, 0.0) for j in self.robot.joints if j.mimic is not None
  1121                                                   ]:
  1122    113700     1.01e+10  88540.8     57.4              matrix, joint_q = self._forward_kinematics_joint(j, q=q)
  1123                                           
  1124                                                       # update internal configuration vector - only consider actuated joints
  1125    113699  406909295.0   3578.8      2.3              if j.name in self.actuated_joint_names:
  1126    194458  497972480.0   2560.8      2.8                  self._cfg[
  1127     97229  425930115.0   4380.7      2.4                      self.actuated_dof_indices[self.actuated_joint_names.index(j.name)]
  1128     97229   72031055.0    740.8      0.4                  ] = joint_q
  1129                                           
  1130    113699   96875869.0    852.0      0.6              if self._scene is not None:
  1131    227398 5277726395.0  23209.2     30.1                  self._scene.graph.update(
  1132    113699  105364266.0    926.7      0.6                      frame_from=j.parent, frame_to=j.child, matrix=matrix
  1133                                                           )
  1134    113699   96699385.0    850.5      0.6              if self._scene_collision is not None:
  1135                                                           self._scene_collision.graph.update(
  1136                                                               frame_from=j.parent, frame_to=j.child, matrix=matrix
  1137                                                           )

Total time: 17.9263 s
File: /home/dpsh/kscale_vr_teleop/src/ik_helpers.py
Function: IKSolver.from_scratch_ik.<locals>.residuals at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                                   @profile
    19                                                   def residuals(joint_angles):
    20     24006     1.31e+10 544057.9     72.9              self.robot.update_cfg({
    21     16004   64565631.0   4034.3      0.4                  k.name: joint_angles[i] for i, k in enumerate(self.robot.actuated_joints)
    22                                                       })
    23      8001 4752849471.0 594031.9     26.5              ee_position = self.robot.get_transform(frame_name, "base")
    24      8001   48277026.0   6033.9      0.3              return ee_position[:3, 3] - target_position

Total time: 33.0731 s
File: /home/dpsh/kscale_vr_teleop/src/ik_helpers.py
Function: IKSolver.from_scratch_ik at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                               @profile
    17                                               def from_scratch_ik(self, target_position, frame_name): # This shouldn't be necessary but ikpy's inverse kinematics is ironically crap
    18       150   40265143.0 268434.3      0.1          @profile
    19       150     225453.0   1503.0      0.0          def residuals(joint_angles):
    20                                                       self.robot.update_cfg({
    21                                                           k.name: joint_angles[i] for i, k in enumerate(self.robot.actuated_joints)
    22                                                       })
    23                                                       ee_position = self.robot.get_transform(frame_name, "base")
    24                                                       return ee_position[:3, 3] - target_position
    25                                                   
    26        75     551374.0   7351.7      0.0          jac_sparsity_mat = np.zeros((1, len(self.robot.actuated_joints)))
    27        75     157221.0   2096.3      0.0          jac_sparsity_mat[0,0] = 1
    28        75      81095.0   1081.3      0.0          jac_sparsity_mat[0,2] = 1
    29        75      81226.0   1083.0      0.0          jac_sparsity_mat[0,4] = 1
    30        75      96132.0   1281.8      0.0          jac_sparsity_mat[0,6] = 1
    31                                           
    32        75      60000.0    800.0      0.0          SOLVE_WITH_BOUNDS = True
    33        75      3.3e+10  4.4e+08     99.9          result = least_squares(residuals, self.last_guess, bounds=(self.lower_bounds, self.upper_bounds) if SOLVE_WITH_BOUNDS else (-np.inf, np.inf), jac_sparsity=np.repeat(jac_sparsity_mat, 3, axis=0))
    34        74     265781.0   3591.6      0.0          solution = result.x
    35        74      74275.0   1003.7      0.0          self.last_guess = solution
    36                                                   # if not SOLVE_WITH_BOUNDS:
    37                                                   #     solution = np.clip(solution, self.lower_bounds, self.upper_bounds)
    38        74     176932.0   2391.0      0.0          return solution

Total time: 47.4615 s
File: /home/dpsh/kscale_vr_teleop/src/main.py
Function: stream_cameras at line 46

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    46                                           @profile
    47                                           async def stream_cameras(session: VuerSession, left_src=0, right_src=1):
    48         1       2574.0   2574.0      0.0      if STREAM:
    49                                                   left_pipeline = "libcamerasrc camera-name=/base/axi/pcie@1000120000/rp1/i2c@80000/ov5647@36 exposure-time-mode=0 analogue-gain-mode=0 ae-enable=true awb-enable=true af-mode=manual ! video/x-raw,format=BGR,width=1280,height=720,framerate=30/1 ! videoconvert ! appsink drop=1 max-buffers=1"
    50                                                   right_pipeline = "libcamerasrc camera-name=/base/axi/pcie@1000120000/rp1/i2c@88000/ov5647@36 exposure-time-mode=0 analogue-gain-mode=0 ae-enable=true awb-enable=true af-mode=manual ! video/x-raw,format=BGR,width=1280,height=720,framerate=30/1 ! videoconvert ! appsink drop=1 max-buffers=1"
    51                                                   cam_left = cv2.VideoCapture(left_pipeline, cv2.CAP_GSTREAMER)
    52                                                   cam_right = cv2.VideoCapture(right_pipeline, cv2.CAP_GSTREAMER)
    53                                               
    54        75     155000.0   2066.7      0.0      while True:
    55        75     3.32e+10 4.43e+08     69.9          left_arm_joints, right_arm_joints = calculate_arm_joints(head_matrix, left_wrist_pose, right_wrist_pose)
    56        74     1.42e+10 1.92e+08     30.0          left_finger_joints, right_finger_joints = calculate_hand_joints(left_finger_poses, right_finger_poses)
    57        74   17202624.0 232467.9      0.0          udp_handler._send_udp(right_arm_joints, left_arm_joints, right_finger_joints, left_finger_joints)
    58        74     136278.0   1841.6      0.0          if STREAM:
    59                                                       ret_left, frame_left = cam_left.read()
    60                                                       ret_right, frame_right = cam_right.read()
    61                                                       if not ret_left or not ret_right:
    62                                                           continue
    63                                                       frame_left_rgb = cv2.cvtColor(frame_left, cv2.COLOR_BGR2RGB)
    64                                                       # frame_right_rgb = cv2.cvtColor(frame_right, cv2.COLOR_BGR2RGB)
    65                                                       frame_left_rgb = cv2.undistort(frame_left_rgb, cam_mat, dist_coeffs)
    66                                                       frame_left_rgb = cv2.resize(frame_left_rgb, (640, 360), interpolation=cv2.INTER_LINEAR)
    67                                                       frame_right_rgb = frame_left_rgb.copy()
    68                                                       # frame_right_rgb = cv2.undistort(frame_right_rgb, cam_mat, dist_coeffs)
    69                                                       # Add text labels for left/right cameras
    70                                                       # cv2.putText(frame_left_rgb, "Left Camera", (600, 30), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 4)
    71                                                       # cv2.putText(frame_right_rgb, "Right Camera", (600, 30), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 4)
    72                                                       # Send both images as ImageBackground objects for left/right eye
    73                                                       interpupilary_dist = 0
    74                                           
    75                                                       distance_to_camera = 3.5*cam_mat[0][0] / frame_left_rgb.shape[1] # TODO: remove this hard-coded 2 multiplier
    76                                                       vertical_angle_rad = np.deg2rad(25)  # Example vertical angle, adjust as needed
    77                                                       # Calculate positions for left and right screens with vertical displacement
    78                                                       # Keep the same distance from user but move down by the vertical angle
    79                                                       y_offset = -distance_to_camera * np.sin(vertical_angle_rad)  # Negative for below horizon
    80                                                       z_offset = distance_to_camera * (np.cos(vertical_angle_rad) - 1)  # Adjustment to maintain distance
    81                                                       session.upsert([
    82                                                           ImageBackground(
    83                                                               frame_left_rgb,
    84                                                               aspect=1.778,
    85                                                               height=2,
    86                                                               distanceToCamera=distance_to_camera,
    87                                                               position=[-interpupilary_dist/2, y_offset, z_offset],
    88                                                               layers=1,
    89                                                               format="jpeg",
    90                                                               quality=1000,
    91                                                               key="background-left",
    92                                                               interpolate=True,
    93                                                           ),
    94                                                           ImageBackground(
    95                                                               frame_right_rgb,
    96                                                               aspect=1.778,
    97                                                               height=2,
    98                                                               distanceToCamera=distance_to_camera,
    99                                                               position=[-interpupilary_dist/2, y_offset, z_offset],
   100                                                               layers=2,
   101                                                               format="jpeg",
   102                                                               quality=1000,
   103                                                               key="background-right",
   104                                                               interpolate=True,
   105                                                           ),
   106                                                       ], to="bgChildren")
   107        74    6030401.0  81491.9      0.0          await asyncio.sleep(1/30)  # ~30 FPS for smoother streaming

 17.55 seconds - /home/dpsh/miniforge3/envs/vr-teleop/lib/python3.12/site-packages/yourdfpy/urdf.py:1084 - URDF.update_cfg
 17.93 seconds - /home/dpsh/kscale_vr_teleop/src/ik_helpers.py:18 - IKSolver.from_scratch_ik.<locals>.residuals
 33.07 seconds - /home/dpsh/kscale_vr_teleop/src/ik_helpers.py:16 - IKSolver.from_scratch_ik
 47.46 seconds - /home/dpsh/kscale_vr_teleop/src/main.py:46 - stream_cameras
