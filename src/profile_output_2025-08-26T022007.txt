Timer unit: 1e-09 s

Total time: 7.98252 s
File: /home/dpsh/miniforge3/envs/vr-teleop/lib/python3.12/site-packages/yourdfpy/urdf.py
Function: URDF.update_cfg at line 1084

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
  1084                                               @profile
  1085                                               def update_cfg(self, configuration):
  1086                                                   """Update joint configuration of URDF; does forward kinematics.
  1087                                           
  1088                                                   Args:
  1089                                                       configuration (dict, list[float], tuple[float] or np.ndarray): A mapping from joints or joint names to configuration values, or a list containing a value for each actuated joint.
  1090                                           
  1091                                                   Raises:
  1092                                                       ValueError: Raised if dimensionality of configuration does not match number of actuated joints of URDF model.
  1093                                                       TypeError: Raised if configuration is neither a dict, list, tuple or np.ndarray.
  1094                                                   """
  1095      6042    7272278.0   1203.6      0.1          joint_cfg = []
  1096                                           
  1097      6042    7740257.0   1281.1      0.1          if isinstance(configuration, dict):
  1098     58032   48034395.0    827.7      0.6              for joint in configuration:
  1099     51990   43628498.0    839.2      0.5                  if isinstance(joint, six.string_types):
  1100     51990   49355032.0    949.3      0.6                      joint_cfg.append((self._joint_map[joint], configuration[joint]))
  1101                                                           elif isinstance(joint, Joint):
  1102                                                               # TODO: Joint is not hashable; so this branch will not succeed
  1103                                                               joint_cfg.append((joint, configuration[joint]))
  1104                                                   elif isinstance(configuration, (list, tuple, np.ndarray)):
  1105                                                       if len(configuration) == len(self.robot.joints):
  1106                                                           for joint, value in zip(self.robot.joints, configuration):
  1107                                                               joint_cfg.append((joint, value))
  1108                                                       elif len(configuration) == self.num_actuated_joints:
  1109                                                           for joint, value in zip(self._actuated_joints, configuration):
  1110                                                               joint_cfg.append((joint, value))
  1111                                                       else:
  1112                                                           raise ValueError(
  1113                                                               f"Dimensionality of configuration ({len(configuration)}) doesn't match number of all ({len(self.robot.joints)}) or actuated joints ({self.num_actuated_joints})."
  1114                                                           )
  1115                                                   else:
  1116                                                       raise TypeError("Invalid type for configuration")
  1117                                           
  1118                                                   # append all mimic joints in the update
  1119     70116   84326687.0   1202.7      1.1          for j, q in joint_cfg + [
  1120     12084   19808017.0   1639.2      0.2              (j, 0.0) for j in self.robot.joints if j.mimic is not None
  1121                                                   ]:
  1122     51990 4545651013.0  87433.2     56.9              matrix, joint_q = self._forward_kinematics_joint(j, q=q)
  1123                                           
  1124                                                       # update internal configuration vector - only consider actuated joints
  1125     51990  189901991.0   3652.7      2.4              if j.name in self.actuated_joint_names:
  1126    103980  267735989.0   2574.9      3.4                  self._cfg[
  1127     51990  233166522.0   4484.8      2.9                      self.actuated_dof_indices[self.actuated_joint_names.index(j.name)]
  1128     51990   37711581.0    725.4      0.5                  ] = joint_q
  1129                                           
  1130     51990   42532706.0    818.1      0.5              if self._scene is not None:
  1131    103980 2314025254.0  22254.5     29.0                  self._scene.graph.update(
  1132     51990   47039981.0    904.8      0.6                      frame_from=j.parent, frame_to=j.child, matrix=matrix
  1133                                                           )
  1134     51990   44593902.0    857.7      0.6              if self._scene_collision is not None:
  1135                                                           self._scene_collision.graph.update(
  1136                                                               frame_from=j.parent, frame_to=j.child, matrix=matrix
  1137                                                           )

Total time: 25.486 s
File: /home/dpsh/kscale_vr_teleop/src/from_rerun_data.py
Function: main at line 67

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    67                                           @profile
    68                                           def main():
    69       563  219611547.0 390073.8      0.9      for i, row in enumerate(tqdm(df.iter_rows(named=True), total=len(df))):
    70                                                   # read translation and rotation (user confirmed these parse correctly)
    71       562    5188027.0   9231.4      0.0          translation = np.array(row['/right_wrist:Translation3D']).reshape(3,)
    72       562     806687.0   1435.4      0.0          rot_cell = row.get('/right_wrist:TransformMat3x3')
    73       562     459548.0    817.7      0.0          if rot_cell is None:
    74                                                       rotation = np.eye(3)
    75                                                   else:
    76       562    2859663.0   5088.4      0.0              rotation = np.array(rot_cell).reshape((3,3))
    77                                           
    78       562   13176125.0  23445.1      0.1          frame_mat = np.eye(4)
    79       562    1986563.0   3534.8      0.0          frame_mat[:3,:3] = rotation
    80       562    1132898.0   2015.8      0.0          frame_mat[:3,3] = translation
    81                                           
    82                                                   # map to kbot space
    83       562    6669083.0  11866.7      0.0          frame_mat = transform @ frame_mat
    84                                           
    85                                                   # timestamp if present
    86       562     876251.0   1559.2      0.0          timestamp = row.get('log_time') if 'log_time' in row else None
    87       562     455743.0    810.9      0.0          if timestamp is None:
    88                                                       timestamp = int(i)
    89                                           
    90                                                   # IK computations
    91       562     1.43e+10 2.54e+07     56.1          _, old_arm_joint_angles = calculate_arm_joints(np.eye(4), np.eye(4), frame_mat)
    92       562 6438991127.0 1.15e+07     25.3          _, arm_joint_angles = new_calculate_arm_joints(np.eye(4), np.eye(4), frame_mat)
    93                                           
    94       562   13842253.0  24630.3      0.1          rr.set_time_seconds('my_timeline', timestamp.timestamp())
    95                                           
    96                                                   # forward kinematics positions
    97       562  114691812.0 204078.0      0.5          fk_wrist_position = right_chain.forward_kinematics(arm_joint_angles)[:3,3]
    98                                           
    99                                                   # apply old solution to robot config (old_arm_joint_angles already sampled in calculate_arm_joints)
   100       562    3687295.0   6561.0      0.0          new_config = {k.name: old_arm_joint_angles[i] for i, k in enumerate(arms_robot.actuated_joints[::2])}
   101       562  458963756.0 816661.5      1.8          arms_robot.update_cfg(new_config)
   102       562  348558856.0 620211.5      1.4          old_fk_wrist_position = arms_robot.get_transform('KB_C_501X_Right_Bayonet_Adapter_Hard_Stop', 'base')[:3,3]
   103                                           
   104                                                   # _, jax_joints = jax_calculate_arm_joints(np.eye(4), np.eye(4), frame_mat)
   105                                           
   106                                                   # new_config = {k.name: jax_joints[i] for i, k in enumerate(arms_robot.actuated_joints[::2])}
   107                                                   # arms_robot.update_cfg(new_config)
   108                                                   # jax_ee_position = arms_robot.get_transform('KB_C_501X_Right_Bayonet_Adapter_Hard_Stop', 'base')[:3,3]
   109                                           
   110                                                   # compute L2 residuals (target position vs each solver's end-effector position)
   111       562    1152317.0   2050.4      0.0          target_pos = frame_mat[:3,3]
   112       562   19981082.0  35553.5      0.1          res_new = float(np.linalg.norm(fk_wrist_position - target_pos))
   113       562   17062759.0  30360.8      0.1          res_old = float(np.linalg.norm(old_fk_wrist_position - target_pos))
   114                                                   # res_jax = float(np.linalg.norm(jax_ee_position - target_pos))
   115                                           
   116                                                   # log residuals as scalars so Rerun can plot them over time
   117       562  235067465.0 418269.5      0.9          rr.log('residual_new', rr.Scalar(res_new))
   118       562  168424900.0 299688.4      0.7          rr.log('residual_old', rr.Scalar(res_old))
   119       562     793454.0   1411.8      0.0          err.append(res_old)
   120                                                   # rr.log('residual_jax', rr.Scalar(res_jax))
   121                                           
   122                                                   # Rerun logging
   123       562  430200951.0 765482.1      1.7          rr.log('fk_position', rr.Points3D([fk_wrist_position], colors=[[255,0,0]], radii=0.01))
   124                                                   # rr.log('jax_ee_position', rr.Points3D([jax_ee_position], colors=[[255,0,255]], radii=0.01))
   125       562  357273651.0 635718.2      1.4          rr.log('old_fk_position', rr.Points3D([old_fk_wrist_position], colors=[[0,0,255]], radii=0.01))
   126       562  638144723.0 1.14e+06      2.5          rr.log('target_position', rr.Transform3D(translation=frame_mat[:3,3], mat3x3=frame_mat[:3,:3], axis_length=0.05))
   127                                           
   128       562    6199789.0  11031.7      0.0          new_config = {k.name: old_arm_joint_angles[i] for i, k in enumerate(arms_robot.actuated_joints[::2])}
   129       562  502550302.0 894217.6      2.0          arms_robot.update_cfg(new_config)
   130       562  676753279.0  1.2e+06      2.7          positions = [arms_robot.get_transform(link, 'base')[:3,3] for link in right_arm_links]
   131       562  498625117.0 887233.3      2.0          rr.log('kinematic_chain', rr.LineStrips3D(positions, colors=[[255,255,255]]*(len(positions)-1), radii=0.005))
   132                                           
   133         1      21797.0  21797.0      0.0      print('Done')
   134         1     185186.0 185186.0      0.0      mse = np.mean(np.array(err)**2)
   135         1      25444.0  25444.0      0.0      print(f'MSE: {mse}')
   136         1     306945.0 306945.0      0.0      rr.log('mse', rr.Scalar(mse), static=True)

  7.98 seconds - /home/dpsh/miniforge3/envs/vr-teleop/lib/python3.12/site-packages/yourdfpy/urdf.py:1084 - URDF.update_cfg
 25.49 seconds - /home/dpsh/kscale_vr_teleop/src/from_rerun_data.py:67 - main
