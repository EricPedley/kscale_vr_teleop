Timer unit: 1e-09 s

Total time: 13.3 s
File: /home/dpsh/kscale_vr_teleop/src/ik_helpers.py
Function: IKSolver.from_scratch_ik.<locals>.residuals at line 18

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    18                                                   @profile
    19                                                   def residuals(joint_angles):
    20     19365 9476096535.0 489341.4     71.2              self.robot.update_cfg({
    21     12910   51147076.0   3961.8      0.4                  k.name: joint_angles[i] for i, k in enumerate(self.robot.actuated_joints)
    22                                                       })
    23      6455 3736743797.0 578891.4     28.1              ee_position = self.robot.get_transform(frame_name, "base")
    24      6455   36016353.0   5579.6      0.3              return ee_position[:3, 3] - target_position

Total time: 25.385 s
File: /home/dpsh/kscale_vr_teleop/src/ik_helpers.py
Function: IKSolver.from_scratch_ik at line 16

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    16                                               @profile
    17                                               def from_scratch_ik(self, target_position, frame_name): # This shouldn't be necessary but ikpy's inverse kinematics is ironically crap
    18       146   39298957.0 269170.9      0.2          @profile
    19       146     220397.0   1509.6      0.0          def residuals(joint_angles):
    20                                                       self.robot.update_cfg({
    21                                                           k.name: joint_angles[i] for i, k in enumerate(self.robot.actuated_joints)
    22                                                       })
    23                                                       ee_position = self.robot.get_transform(frame_name, "base")
    24                                                       return ee_position[:3, 3] - target_position
    25                                                   
    26        73     514096.0   7042.4      0.0          jac_sparsity_mat = np.zeros((1, len(self.robot.actuated_joints)))
    27        73     151558.0   2076.1      0.0          jac_sparsity_mat[0,0] = 1
    28        73      85873.0   1176.3      0.0          jac_sparsity_mat[0,2] = 1
    29        73      76130.0   1042.9      0.0          jac_sparsity_mat[0,4] = 1
    30        73      79665.0   1091.3      0.0          jac_sparsity_mat[0,6] = 1
    31                                           
    32        73      60444.0    828.0      0.0          SOLVE_WITH_BOUNDS = True
    33        73     2.53e+10 3.47e+08     99.8          result = least_squares(residuals, self.last_guess, bounds=(self.lower_bounds, self.upper_bounds) if SOLVE_WITH_BOUNDS else (-np.inf, np.inf), jac_sparsity=np.repeat(jac_sparsity_mat, 3, axis=0))
    34        73     273314.0   3744.0      0.0          solution = result.x
    35        73      81169.0   1111.9      0.0          self.last_guess = solution
    36                                                   # if not SOLVE_WITH_BOUNDS:
    37                                                   #     solution = np.clip(solution, self.lower_bounds, self.upper_bounds)
    38        73     170700.0   2338.4      0.0          return solution

Total time: 41.0248 s
File: /home/dpsh/kscale_vr_teleop/src/main.py
Function: stream_cameras at line 46

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    46                                           @profile
    47                                           async def stream_cameras(session: VuerSession, left_src=0, right_src=1):
    48         1       2574.0   2574.0      0.0      if STREAM:
    49                                                   left_pipeline = "libcamerasrc camera-name=/base/axi/pcie@1000120000/rp1/i2c@80000/ov5647@36 exposure-time-mode=0 analogue-gain-mode=0 ae-enable=true awb-enable=true af-mode=manual ! video/x-raw,format=BGR,width=1280,height=720,framerate=30/1 ! videoconvert ! appsink drop=1 max-buffers=1"
    50                                                   right_pipeline = "libcamerasrc camera-name=/base/axi/pcie@1000120000/rp1/i2c@88000/ov5647@36 exposure-time-mode=0 analogue-gain-mode=0 ae-enable=true awb-enable=true af-mode=manual ! video/x-raw,format=BGR,width=1280,height=720,framerate=30/1 ! videoconvert ! appsink drop=1 max-buffers=1"
    51                                                   cam_left = cv2.VideoCapture(left_pipeline, cv2.CAP_GSTREAMER)
    52                                                   cam_right = cv2.VideoCapture(right_pipeline, cv2.CAP_GSTREAMER)
    53                                               
    54        73     147401.0   2019.2      0.0      while True:
    55        73     2.55e+10 3.49e+08     62.2          left_arm_joints, right_arm_joints = calculate_arm_joints(head_matrix, left_wrist_pose, right_wrist_pose)
    56        73     1.55e+10 2.12e+08     37.8          left_finger_joints, right_finger_joints = calculate_hand_joints(left_finger_poses, right_finger_poses)
    57        72   16315490.0 226604.0      0.0          udp_handler._send_udp(right_arm_joints, left_arm_joints, right_finger_joints, left_finger_joints)
    58        72     151055.0   2098.0      0.0          if STREAM:
    59                                                       ret_left, frame_left = cam_left.read()
    60                                                       ret_right, frame_right = cam_right.read()
    61                                                       if not ret_left or not ret_right:
    62                                                           continue
    63                                                       frame_left_rgb = cv2.cvtColor(frame_left, cv2.COLOR_BGR2RGB)
    64                                                       # frame_right_rgb = cv2.cvtColor(frame_right, cv2.COLOR_BGR2RGB)
    65                                                       frame_left_rgb = cv2.undistort(frame_left_rgb, cam_mat, dist_coeffs)
    66                                                       frame_left_rgb = cv2.resize(frame_left_rgb, (640, 360), interpolation=cv2.INTER_LINEAR)
    67                                                       frame_right_rgb = frame_left_rgb.copy()
    68                                                       # frame_right_rgb = cv2.undistort(frame_right_rgb, cam_mat, dist_coeffs)
    69                                                       # Add text labels for left/right cameras
    70                                                       # cv2.putText(frame_left_rgb, "Left Camera", (600, 30), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 4)
    71                                                       # cv2.putText(frame_right_rgb, "Right Camera", (600, 30), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 4)
    72                                                       # Send both images as ImageBackground objects for left/right eye
    73                                                       interpupilary_dist = 0
    74                                           
    75                                                       distance_to_camera = 3.5*cam_mat[0][0] / frame_left_rgb.shape[1] # TODO: remove this hard-coded 2 multiplier
    76                                                       vertical_angle_rad = np.deg2rad(25)  # Example vertical angle, adjust as needed
    77                                                       # Calculate positions for left and right screens with vertical displacement
    78                                                       # Keep the same distance from user but move down by the vertical angle
    79                                                       y_offset = -distance_to_camera * np.sin(vertical_angle_rad)  # Negative for below horizon
    80                                                       z_offset = distance_to_camera * (np.cos(vertical_angle_rad) - 1)  # Adjustment to maintain distance
    81                                                       session.upsert([
    82                                                           ImageBackground(
    83                                                               frame_left_rgb,
    84                                                               aspect=1.778,
    85                                                               height=2,
    86                                                               distanceToCamera=distance_to_camera,
    87                                                               position=[-interpupilary_dist/2, y_offset, z_offset],
    88                                                               layers=1,
    89                                                               format="jpeg",
    90                                                               quality=1000,
    91                                                               key="background-left",
    92                                                               interpolate=True,
    93                                                           ),
    94                                                           ImageBackground(
    95                                                               frame_right_rgb,
    96                                                               aspect=1.778,
    97                                                               height=2,
    98                                                               distanceToCamera=distance_to_camera,
    99                                                               position=[-interpupilary_dist/2, y_offset, z_offset],
   100                                                               layers=2,
   101                                                               format="jpeg",
   102                                                               quality=1000,
   103                                                               key="background-right",
   104                                                               interpolate=True,
   105                                                           ),
   106                                                       ], to="bgChildren")
   107        72    5750052.0  79861.8      0.0          await asyncio.sleep(1/30)  # ~30 FPS for smoother streaming

 13.30 seconds - /home/dpsh/kscale_vr_teleop/src/ik_helpers.py:18 - IKSolver.from_scratch_ik.<locals>.residuals
 25.39 seconds - /home/dpsh/kscale_vr_teleop/src/ik_helpers.py:16 - IKSolver.from_scratch_ik
 41.02 seconds - /home/dpsh/kscale_vr_teleop/src/main.py:46 - stream_cameras
